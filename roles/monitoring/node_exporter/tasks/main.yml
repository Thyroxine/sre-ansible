---
- name: Check current node_exporter version.
  command: "{{ node_exporter_bin_path }} --version"
  failed_when: false
  changed_when: false
  register: node_exporter_version_check

- name: Download and unarchive node_exporter into temporary location.
  unarchive:
    src: "{{ node_exporter_download_url }}"
    dest: /tmp
    remote_src: true
    mode: 0755
  when: >
    node_exporter_version_check.stdout is not defined
    or node_exporter_version not in node_exporter_version_check.stdout
  register: node_exporter_download_check

- name: Move node_exporter binary into place.
  copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
    dest: "{{ node_exporter_bin_path }}"
    mode: 0755
    remote_src: true
  notify: restart node_exporter
  when: node_exporter_download_check is changed

- name: Create node_exporter user.
  user:
    name: node_exporter
    shell: /sbin/nologin
    state: present

- name: Create etc directory
  file:
    path: "/etc/prometheus/node_exporter"
    state: directory
    mode: '0755'
    owner: node_exporter
    group: node_exporter

- name: Copy web config file
  template:
    src: web.yml.j2
    dest: "{{node_exporter_web_config}}"
    mode: '0644'
    owner: node_exporter
    group: node_exporter

- name: Copy the node_exporter systemd unit file.
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: 0644
  register: node_exporter_service

- name: Reload systemd daemon if unit file is changed.
  systemd:
    daemon_reload: true
  notify: restart node_exporter
  when: node_exporter_service is changed

- name: Ensure node_exporter is running and enabled at boot.
  service:
    name: node_exporter
    state: "{{ node_exporter_state }}"
    enabled: "{{ node_exporter_enabled }}"

- name: Verify node_exporter is responding to requests.
  uri:
    url: http://localhost:9100/
    force_basic_auth: yes
    url_username: "{{ node_basic_auth_user }}"
    url_password: "{{ node_basic_auth_password }}"
    return_content: true
  register: metrics_output
  failed_when: "'Metrics' not in metrics_output.content"
